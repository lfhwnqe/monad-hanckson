{
  "address": "0xC27979Cc635947f22af603DC9F77250631651996",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        }
      ],
      "name": "GameCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "player1",
          "type": "address"
        }
      ],
      "name": "GameCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isDraw",
          "type": "bool"
        }
      ],
      "name": "GameFinished",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "player1",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "player2",
          "type": "address"
        }
      ],
      "name": "GameJoined",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "x",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "y",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "enum Gomoku.PieceType",
          "name": "pieceType",
          "type": "uint8"
        }
      ],
      "name": "MoveMade",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BOARD_SIZE",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WIN_CONDITION",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        }
      ],
      "name": "cancelGame",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "createGame",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "createPracticeGame",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "gameMoves",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "x",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "y",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "internalType": "enum Gomoku.PieceType",
          "name": "pieceType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "games",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "player1",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "player2",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "currentPlayer",
          "type": "address"
        },
        {
          "internalType": "enum Gomoku.GameStatus",
          "name": "status",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "winner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "createdAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastMoveAt",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "moveCount",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "isPracticeMode",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        }
      ],
      "name": "getBoard",
      "outputs": [
        {
          "internalType": "enum Gomoku.PieceType[15][15]",
          "name": "",
          "type": "uint8[15][15]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        }
      ],
      "name": "getGame",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "gameId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "player1",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "player2",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "currentPlayer",
              "type": "address"
            },
            {
              "internalType": "enum Gomoku.GameStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "winner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "createdAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastMoveAt",
              "type": "uint256"
            },
            {
              "internalType": "enum Gomoku.PieceType[15][15]",
              "name": "board",
              "type": "uint8[15][15]"
            },
            {
              "internalType": "uint8",
              "name": "moveCount",
              "type": "uint8"
            },
            {
              "internalType": "bool",
              "name": "isPracticeMode",
              "type": "bool"
            }
          ],
          "internalType": "struct Gomoku.Game",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        }
      ],
      "name": "getGameMoves",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "x",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "y",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "player",
              "type": "address"
            },
            {
              "internalType": "enum Gomoku.PieceType",
              "name": "pieceType",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            }
          ],
          "internalType": "struct Gomoku.Move[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "getPlayerGames",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "getPlayerStats",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "wins",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "losses",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getWaitingGames",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        }
      ],
      "name": "joinGame",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        },
        {
          "internalType": "uint8[]",
          "name": "xCoords",
          "type": "uint8[]"
        },
        {
          "internalType": "uint8[]",
          "name": "yCoords",
          "type": "uint8[]"
        }
      ],
      "name": "makeBatchMoves",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "x",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "y",
          "type": "uint8"
        }
      ],
      "name": "makeMove",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "playerGames",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "playerLosses",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "playerWins",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "waitingGames",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xf5cd56e20c9b31891e5b2ed8dec14c5df1bac8b05a2140ae474f876594d6a2ad",
  "receipt": {
    "to": null,
    "from": "0x1964c6d3a81ED075b97AA4901939eDCEb4037198",
    "contractAddress": "0xC27979Cc635947f22af603DC9F77250631651996",
    "transactionIndex": 14,
    "gasUsed": "2323603",
    "logsBloom": "0x
    "blockHash": "0x0d68802d7843ae86185bb22e0b039a25781f4dd708c8ea3be8aacbe033fcc821",
    "transactionHash": "0xf5cd56e20c9b31891e5b2ed8dec14c5df1bac8b05a2140ae474f876594d6a2ad",
    "logs": [
      {
        "transactionIndex": 14,
        "blockNumber": 20625950,
        "transactionHash": "0xf5cd56e20c9b31891e5b2ed8dec14c5df1bac8b05a2140ae474f876594d6a2ad",
        "address": "0xC27979Cc635947f22af603DC9F77250631651996",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000001964c6d3a81ed075b97aa4901939edceb4037198"
        ],
        "data": "0x",
        "logIndex": 24,
        "blockHash": "0x0d68802d7843ae86185bb22e0b039a25781f4dd708c8ea3be8aacbe033fcc821"
      }
    ],
    "blockNumber": 20625950,
    "cumulativeGasUsed": "6093816",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "4623fcd687d0e165e472b75fd58cd7b3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"GameCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player1\",\"type\":\"address\"}],\"name\":\"GameCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isDraw\",\"type\":\"bool\"}],\"name\":\"GameFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player1\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player2\",\"type\":\"address\"}],\"name\":\"GameJoined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"x\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"y\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"enum Gomoku.PieceType\",\"name\":\"pieceType\",\"type\":\"uint8\"}],\"name\":\"MoveMade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BOARD_SIZE\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WIN_CONDITION\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"cancelGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createGame\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createPracticeGame\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"gameMoves\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"x\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"y\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"internalType\":\"enum Gomoku.PieceType\",\"name\":\"pieceType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"games\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"player1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"player2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"currentPlayer\",\"type\":\"address\"},{\"internalType\":\"enum Gomoku.GameStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastMoveAt\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"moveCount\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isPracticeMode\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"getBoard\",\"outputs\":[{\"internalType\":\"enum Gomoku.PieceType[15][15]\",\"name\":\"\",\"type\":\"uint8[15][15]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"getGame\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"player1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"player2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"currentPlayer\",\"type\":\"address\"},{\"internalType\":\"enum Gomoku.GameStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastMoveAt\",\"type\":\"uint256\"},{\"internalType\":\"enum Gomoku.PieceType[15][15]\",\"name\":\"board\",\"type\":\"uint8[15][15]\"},{\"internalType\":\"uint8\",\"name\":\"moveCount\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isPracticeMode\",\"type\":\"bool\"}],\"internalType\":\"struct Gomoku.Game\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"getGameMoves\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"x\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"y\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"internalType\":\"enum Gomoku.PieceType\",\"name\":\"pieceType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct Gomoku.Move[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"getPlayerGames\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"getPlayerStats\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"wins\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"losses\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWaitingGames\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"joinGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"internalType\":\"uint8[]\",\"name\":\"xCoords\",\"type\":\"uint8[]\"},{\"internalType\":\"uint8[]\",\"name\":\"yCoords\",\"type\":\"uint8[]\"}],\"name\":\"makeBatchMoves\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"x\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"y\",\"type\":\"uint8\"}],\"name\":\"makeMove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"playerGames\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"playerLosses\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"playerWins\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"waitingGames\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"\\u94fe\\u4e0a\\u4e94\\u5b50\\u68cb\\u6e38\\u620f\\u5408\\u7ea6\\uff0c\\u652f\\u6301\\u5b9e\\u65f6\\u5bf9\\u6218\",\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"kind\":\"dev\",\"methods\":{\"cancelGame(uint256)\":{\"details\":\"\\u53d6\\u6d88\\u6e38\\u620f\\uff08\\u4ec5\\u7b49\\u5f85\\u72b6\\u6001\\uff09\"},\"createGame()\":{\"details\":\"\\u521b\\u5efa\\u65b0\\u6e38\\u620f\"},\"createPracticeGame()\":{\"details\":\"\\u521b\\u5efa\\u7ec3\\u4e60\\u6a21\\u5f0f\\u6e38\\u620f\\uff08\\u5355\\u4eba\\u6d4b\\u8bd5\\uff09\"},\"getBoard(uint256)\":{\"details\":\"\\u83b7\\u53d6\\u6e38\\u620f\\u68cb\\u76d8\\u72b6\\u6001\"},\"getGame(uint256)\":{\"details\":\"\\u83b7\\u53d6\\u6e38\\u620f\\u4fe1\\u606f\"},\"getGameMoves(uint256)\":{\"details\":\"\\u83b7\\u53d6\\u6e38\\u620f\\u79fb\\u52a8\\u8bb0\\u5f55\"},\"getPlayerGames(address)\":{\"details\":\"\\u83b7\\u53d6\\u73a9\\u5bb6\\u7684\\u6e38\\u620f\\u5217\\u8868\"},\"getPlayerStats(address)\":{\"details\":\"\\u83b7\\u53d6\\u73a9\\u5bb6\\u7edf\\u8ba1\\u4fe1\\u606f\"},\"getWaitingGames()\":{\"details\":\"\\u83b7\\u53d6\\u7b49\\u5f85\\u4e2d\\u7684\\u6e38\\u620f\\u5217\\u8868\"},\"joinGame(uint256)\":{\"details\":\"\\u52a0\\u5165\\u6e38\\u620f\"},\"makeBatchMoves(uint256,uint8[],uint8[])\":{\"details\":\"\\u6279\\u91cf\\u4e0b\\u68cb - \\u4e00\\u6b21\\u4ea4\\u6613\\u6267\\u884c\\u591a\\u6b65\\u64cd\\u4f5c\"},\"makeMove(uint256,uint8,uint8)\":{\"details\":\"\\u4e0b\\u68cb\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"Gomoku\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Gomoku.sol\":\"Gomoku\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"contracts/Gomoku.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Gomoku\\r\\n * @dev \\u94fe\\u4e0a\\u4e94\\u5b50\\u68cb\\u6e38\\u620f\\u5408\\u7ea6\\uff0c\\u652f\\u6301\\u5b9e\\u65f6\\u5bf9\\u6218\\r\\n */\\r\\ncontract Gomoku is ReentrancyGuard, Ownable {\\r\\n    // \\u68cb\\u76d8\\u5927\\u5c0f\\r\\n    uint8 public constant BOARD_SIZE = 15;\\r\\n    \\r\\n    // \\u83b7\\u80dc\\u6761\\u4ef6\\uff1a\\u8fde\\u7eed5\\u4e2a\\u68cb\\u5b50\\r\\n    uint8 public constant WIN_CONDITION = 5;\\r\\n    \\r\\n    // \\u68cb\\u5b50\\u7c7b\\u578b\\r\\n    enum PieceType { Empty, Black, White }\\r\\n    \\r\\n    // \\u6e38\\u620f\\u72b6\\u6001\\r\\n    enum GameStatus { Waiting, Playing, Finished, Cancelled }\\r\\n    \\r\\n    // \\u6e38\\u620f\\u7ed3\\u6784\\u4f53\\r\\n    struct Game {\\r\\n        uint256 gameId;\\r\\n        address player1;        // \\u9ed1\\u68cb\\u73a9\\u5bb6\\r\\n        address player2;        // \\u767d\\u68cb\\u73a9\\u5bb6\\r\\n        address currentPlayer;  // \\u5f53\\u524d\\u56de\\u5408\\u73a9\\u5bb6\\r\\n        GameStatus status;\\r\\n        address winner;\\r\\n        uint256 createdAt;\\r\\n        uint256 lastMoveAt;\\r\\n        PieceType[BOARD_SIZE][BOARD_SIZE] board;\\r\\n        uint8 moveCount;\\r\\n        bool isPracticeMode;    // \\u7ec3\\u4e60\\u6a21\\u5f0f\\u6807\\u8bb0\\r\\n    }\\r\\n    \\r\\n    // \\u79fb\\u52a8\\u8bb0\\u5f55\\r\\n    struct Move {\\r\\n        uint8 x;\\r\\n        uint8 y;\\r\\n        address player;\\r\\n        PieceType pieceType;\\r\\n        uint256 timestamp;\\r\\n    }\\r\\n    \\r\\n    // \\u5b58\\u50a8\\u53d8\\u91cf\\r\\n    uint256 private nextGameId = 1;\\r\\n    mapping(uint256 => Game) public games;\\r\\n    mapping(uint256 => Move[]) public gameMoves;\\r\\n    mapping(address => uint256[]) public playerGames;\\r\\n    mapping(address => uint256) public playerWins;\\r\\n    mapping(address => uint256) public playerLosses;\\r\\n    \\r\\n    // \\u5f85\\u5339\\u914d\\u7684\\u6e38\\u620f\\u5217\\u8868\\r\\n    uint256[] public waitingGames;\\r\\n    \\r\\n    // \\u4e8b\\u4ef6\\r\\n    event GameCreated(uint256 indexed gameId, address indexed player1);\\r\\n    event GameJoined(uint256 indexed gameId, address indexed player1, address indexed player2);\\r\\n    event MoveMade(uint256 indexed gameId, address indexed player, uint8 x, uint8 y, PieceType pieceType);\\r\\n    event GameFinished(uint256 indexed gameId, address indexed winner, bool isDraw);\\r\\n    event GameCancelled(uint256 indexed gameId);\\r\\n    \\r\\n    constructor() Ownable(msg.sender) {}\\r\\n    \\r\\n    /**\\r\\n     * @dev \\u521b\\u5efa\\u65b0\\u6e38\\u620f\\r\\n     */\\r\\n    function createGame() external nonReentrant returns (uint256) {\\r\\n        uint256 gameId = nextGameId++;\\r\\n        \\r\\n        games[gameId] = Game({\\r\\n            gameId: gameId,\\r\\n            player1: msg.sender,\\r\\n            player2: address(0),\\r\\n            currentPlayer: msg.sender,\\r\\n            status: GameStatus.Waiting,\\r\\n            winner: address(0),\\r\\n            createdAt: block.timestamp,\\r\\n            lastMoveAt: 0,\\r\\n            board: _getEmptyBoard(),\\r\\n            moveCount: 0,\\r\\n            isPracticeMode: false\\r\\n        });\\r\\n        \\r\\n        playerGames[msg.sender].push(gameId);\\r\\n        waitingGames.push(gameId);\\r\\n        \\r\\n        emit GameCreated(gameId, msg.sender);\\r\\n        return gameId;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev \\u521b\\u5efa\\u7ec3\\u4e60\\u6a21\\u5f0f\\u6e38\\u620f\\uff08\\u5355\\u4eba\\u6d4b\\u8bd5\\uff09\\r\\n     */\\r\\n    function createPracticeGame() external nonReentrant returns (uint256) {\\r\\n        uint256 gameId = nextGameId++;\\r\\n        \\r\\n        games[gameId] = Game({\\r\\n            gameId: gameId,\\r\\n            player1: msg.sender,\\r\\n            player2: msg.sender,  // \\u7ec3\\u4e60\\u6a21\\u5f0f\\uff1a\\u540c\\u4e00\\u4e2a\\u5730\\u5740\\u63a7\\u5236\\u4e24\\u65b9\\r\\n            currentPlayer: msg.sender,\\r\\n            status: GameStatus.Playing,  // \\u76f4\\u63a5\\u8fdb\\u5165\\u6e38\\u620f\\u72b6\\u6001\\r\\n            winner: address(0),\\r\\n            createdAt: block.timestamp,\\r\\n            lastMoveAt: block.timestamp,\\r\\n            board: _getEmptyBoard(),\\r\\n            moveCount: 0,\\r\\n            isPracticeMode: true\\r\\n        });\\r\\n        \\r\\n        playerGames[msg.sender].push(gameId);\\r\\n        // \\u4e0d\\u52a0\\u5165\\u7b49\\u5f85\\u5217\\u8868\\uff0c\\u56e0\\u4e3a\\u662f\\u7ec3\\u4e60\\u6a21\\u5f0f\\r\\n        \\r\\n        emit GameCreated(gameId, msg.sender);\\r\\n        emit GameJoined(gameId, msg.sender, msg.sender);\\r\\n        return gameId;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev \\u52a0\\u5165\\u6e38\\u620f\\r\\n     */\\r\\n    function joinGame(uint256 gameId) external nonReentrant {\\r\\n        Game storage game = games[gameId];\\r\\n        require(game.gameId != 0, \\\"Game does not exist\\\");\\r\\n        require(game.status == GameStatus.Waiting, \\\"Game is not waiting for players\\\");\\r\\n        require(game.player1 != msg.sender, \\\"Cannot join your own game\\\");\\r\\n        require(game.player2 == address(0), \\\"Game is already full\\\");\\r\\n        \\r\\n        game.player2 = msg.sender;\\r\\n        game.status = GameStatus.Playing;\\r\\n        game.lastMoveAt = block.timestamp;\\r\\n        \\r\\n        playerGames[msg.sender].push(gameId);\\r\\n        _removeFromWaitingGames(gameId);\\r\\n        \\r\\n        emit GameJoined(gameId, game.player1, msg.sender);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev \\u6279\\u91cf\\u4e0b\\u68cb - \\u4e00\\u6b21\\u4ea4\\u6613\\u6267\\u884c\\u591a\\u6b65\\u64cd\\u4f5c\\r\\n     */\\r\\n    function makeBatchMoves(\\r\\n        uint256 gameId,\\r\\n        uint8[] calldata xCoords,\\r\\n        uint8[] calldata yCoords\\r\\n    ) external nonReentrant {\\r\\n        require(xCoords.length == yCoords.length, \\\"Coordinates arrays length mismatch\\\");\\r\\n        require(xCoords.length > 0, \\\"No moves provided\\\");\\r\\n        require(xCoords.length <= 10, \\\"Too many moves in batch\\\"); // \\u9650\\u5236\\u6279\\u91cf\\u5927\\u5c0f\\r\\n        \\r\\n        Game storage game = games[gameId];\\r\\n        require(game.gameId != 0, \\\"Game does not exist\\\");\\r\\n        require(game.status == GameStatus.Playing, \\\"Game is not in playing status\\\");\\r\\n        \\r\\n        // \\u7ec3\\u4e60\\u6a21\\u5f0f\\u4e0b\\u5141\\u8bb8\\u6279\\u91cf\\u64cd\\u4f5c\\r\\n        if (game.isPracticeMode) {\\r\\n            require(msg.sender == game.player1, \\\"Only practice game creator can move\\\");\\r\\n            \\r\\n            // \\u6267\\u884c\\u6240\\u6709\\u79fb\\u52a8\\r\\n            for (uint i = 0; i < xCoords.length; i++) {\\r\\n                _executeSingleMove(gameId, xCoords[i], yCoords[i]);\\r\\n                \\r\\n                // \\u68c0\\u67e5\\u6e38\\u620f\\u662f\\u5426\\u7ed3\\u675f\\r\\n                if (game.status == GameStatus.Finished) {\\r\\n                    break; // \\u6e38\\u620f\\u7ed3\\u675f\\uff0c\\u505c\\u6b62\\u6267\\u884c\\u540e\\u7eed\\u79fb\\u52a8\\r\\n                }\\r\\n            }\\r\\n        } else {\\r\\n            revert(\\\"Batch moves only available in practice mode\\\");\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev \\u4e0b\\u68cb\\r\\n     */\\r\\n    function makeMove(uint256 gameId, uint8 x, uint8 y) external nonReentrant {\\r\\n        _executeSingleMove(gameId, x, y);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev \\u6267\\u884c\\u5355\\u6b65\\u79fb\\u52a8\\u7684\\u5185\\u90e8\\u51fd\\u6570\\r\\n     */\\r\\n    function _executeSingleMove(uint256 gameId, uint8 x, uint8 y) private {\\r\\n        Game storage game = games[gameId];\\r\\n        require(game.gameId != 0, \\\"Game does not exist\\\");\\r\\n        require(game.status == GameStatus.Playing, \\\"Game is not in playing status\\\");\\r\\n        require(x < BOARD_SIZE && y < BOARD_SIZE, \\\"Invalid coordinates\\\");\\r\\n        require(game.board[x][y] == PieceType.Empty, \\\"Position already occupied\\\");\\r\\n        \\r\\n        // \\u7ec3\\u4e60\\u6a21\\u5f0f\\uff1a\\u5141\\u8bb8\\u540c\\u4e00\\u5730\\u5740\\u63a7\\u5236\\u53cc\\u65b9\\r\\n        if (game.isPracticeMode) {\\r\\n            require(msg.sender == game.player1, \\\"Only practice game creator can move\\\");\\r\\n        } else {\\r\\n            require(msg.sender == game.currentPlayer, \\\"Not your turn\\\");\\r\\n        }\\r\\n        \\r\\n        // \\u786e\\u5b9a\\u68cb\\u5b50\\u7c7b\\u578b\\r\\n        PieceType pieceType;\\r\\n        if (game.isPracticeMode) {\\r\\n            // \\u7ec3\\u4e60\\u6a21\\u5f0f\\uff1a\\u6839\\u636e\\u56de\\u5408\\u6570\\u51b3\\u5b9a\\u68cb\\u5b50\\u989c\\u8272\\r\\n            pieceType = (game.moveCount % 2 == 0) ? PieceType.Black : PieceType.White;\\r\\n        } else {\\r\\n            // \\u6b63\\u5e38\\u6a21\\u5f0f\\uff1a\\u6839\\u636e\\u73a9\\u5bb6\\u5730\\u5740\\u51b3\\u5b9a\\u68cb\\u5b50\\u989c\\u8272\\r\\n            pieceType = (msg.sender == game.player1) ? PieceType.Black : PieceType.White;\\r\\n        }\\r\\n        \\r\\n        // \\u4e0b\\u68cb\\r\\n        game.board[x][y] = pieceType;\\r\\n        game.moveCount++;\\r\\n        game.lastMoveAt = block.timestamp;\\r\\n        \\r\\n        // \\u8bb0\\u5f55\\u79fb\\u52a8\\r\\n        gameMoves[gameId].push(Move({\\r\\n            x: x,\\r\\n            y: y,\\r\\n            player: msg.sender,\\r\\n            pieceType: pieceType,\\r\\n            timestamp: block.timestamp\\r\\n        }));\\r\\n        \\r\\n        emit MoveMade(gameId, msg.sender, x, y, pieceType);\\r\\n        \\r\\n        // \\u68c0\\u67e5\\u80dc\\u8d1f\\r\\n        if (_checkWin(game.board, x, y, pieceType)) {\\r\\n            game.status = GameStatus.Finished;\\r\\n            game.winner = msg.sender;\\r\\n            \\r\\n            if (!game.isPracticeMode) {\\r\\n                playerWins[msg.sender]++;\\r\\n                address loser = (msg.sender == game.player1) ? game.player2 : game.player1;\\r\\n                playerLosses[loser]++;\\r\\n            }\\r\\n            \\r\\n            emit GameFinished(gameId, msg.sender, false);\\r\\n        } else if (game.moveCount >= BOARD_SIZE * BOARD_SIZE) {\\r\\n            // \\u5e73\\u5c40\\r\\n            game.status = GameStatus.Finished;\\r\\n            emit GameFinished(gameId, address(0), true);\\r\\n        } else {\\r\\n            // \\u5207\\u6362\\u56de\\u5408\\r\\n            if (game.isPracticeMode) {\\r\\n                // \\u7ec3\\u4e60\\u6a21\\u5f0f\\uff1a\\u5f53\\u524d\\u73a9\\u5bb6\\u4fdd\\u6301\\u4e0d\\u53d8\\uff08\\u540c\\u4e00\\u5730\\u5740\\u63a7\\u5236\\u53cc\\u65b9\\uff09\\r\\n                game.currentPlayer = msg.sender;\\r\\n            } else {\\r\\n                // \\u6b63\\u5e38\\u6a21\\u5f0f\\uff1a\\u5207\\u6362\\u5230\\u53e6\\u4e00\\u4e2a\\u73a9\\u5bb6\\r\\n                game.currentPlayer = (msg.sender == game.player1) ? game.player2 : game.player1;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev \\u53d6\\u6d88\\u6e38\\u620f\\uff08\\u4ec5\\u7b49\\u5f85\\u72b6\\u6001\\uff09\\r\\n     */\\r\\n    function cancelGame(uint256 gameId) external nonReentrant {\\r\\n        Game storage game = games[gameId];\\r\\n        require(game.gameId != 0, \\\"Game does not exist\\\");\\r\\n        require(game.status == GameStatus.Waiting, \\\"Can only cancel waiting games\\\");\\r\\n        require(msg.sender == game.player1, \\\"Only creator can cancel\\\");\\r\\n        \\r\\n        game.status = GameStatus.Cancelled;\\r\\n        _removeFromWaitingGames(gameId);\\r\\n        \\r\\n        emit GameCancelled(gameId);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev \\u83b7\\u53d6\\u6e38\\u620f\\u4fe1\\u606f\\r\\n     */\\r\\n    function getGame(uint256 gameId) external view returns (Game memory) {\\r\\n        require(games[gameId].gameId != 0, \\\"Game does not exist\\\");\\r\\n        return games[gameId];\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev \\u83b7\\u53d6\\u6e38\\u620f\\u68cb\\u76d8\\u72b6\\u6001\\r\\n     */\\r\\n    function getBoard(uint256 gameId) external view returns (PieceType[BOARD_SIZE][BOARD_SIZE] memory) {\\r\\n        require(games[gameId].gameId != 0, \\\"Game does not exist\\\");\\r\\n        return games[gameId].board;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev \\u83b7\\u53d6\\u6e38\\u620f\\u79fb\\u52a8\\u8bb0\\u5f55\\r\\n     */\\r\\n    function getGameMoves(uint256 gameId) external view returns (Move[] memory) {\\r\\n        require(games[gameId].gameId != 0, \\\"Game does not exist\\\");\\r\\n        return gameMoves[gameId];\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev \\u83b7\\u53d6\\u73a9\\u5bb6\\u7684\\u6e38\\u620f\\u5217\\u8868\\r\\n     */\\r\\n    function getPlayerGames(address player) external view returns (uint256[] memory) {\\r\\n        return playerGames[player];\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev \\u83b7\\u53d6\\u7b49\\u5f85\\u4e2d\\u7684\\u6e38\\u620f\\u5217\\u8868\\r\\n     */\\r\\n    function getWaitingGames() external view returns (uint256[] memory) {\\r\\n        return waitingGames;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev \\u83b7\\u53d6\\u73a9\\u5bb6\\u7edf\\u8ba1\\u4fe1\\u606f\\r\\n     */\\r\\n    function getPlayerStats(address player) external view returns (uint256 wins, uint256 losses) {\\r\\n        return (playerWins[player], playerLosses[player]);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev \\u68c0\\u67e5\\u662f\\u5426\\u83b7\\u80dc\\r\\n     */\\r\\n    function _checkWin(PieceType[BOARD_SIZE][BOARD_SIZE] memory board, uint8 x, uint8 y, PieceType pieceType) private pure returns (bool) {\\r\\n        // \\u68c0\\u67e5\\u56db\\u4e2a\\u65b9\\u5411\\uff1a\\u6c34\\u5e73\\u3001\\u5782\\u76f4\\u3001\\u5bf9\\u89d2\\u7ebf1\\u3001\\u5bf9\\u89d2\\u7ebf2\\r\\n        int8[2][4] memory directions = [\\r\\n            [int8(1), int8(0)],   // \\u6c34\\u5e73\\r\\n            [int8(0), int8(1)],   // \\u5782\\u76f4\\r\\n            [int8(1), int8(1)],   // \\u5bf9\\u89d2\\u7ebf1\\r\\n            [int8(1), int8(-1)]   // \\u5bf9\\u89d2\\u7ebf2\\r\\n        ];\\r\\n        \\r\\n        for (uint i = 0; i < 4; i++) {\\r\\n            uint8 count = 1; // \\u5305\\u542b\\u5f53\\u524d\\u68cb\\u5b50\\r\\n            \\r\\n            // \\u6b63\\u65b9\\u5411\\u8ba1\\u6570\\r\\n            int8 dx = directions[i][0];\\r\\n            int8 dy = directions[i][1];\\r\\n            int8 nx = int8(x) + dx;\\r\\n            int8 ny = int8(y) + dy;\\r\\n            \\r\\n            while (nx >= 0 && nx < int8(BOARD_SIZE) && ny >= 0 && ny < int8(BOARD_SIZE) && \\r\\n                   board[uint8(nx)][uint8(ny)] == pieceType) {\\r\\n                count++;\\r\\n                nx += dx;\\r\\n                ny += dy;\\r\\n            }\\r\\n            \\r\\n            // \\u53cd\\u65b9\\u5411\\u8ba1\\u6570\\r\\n            nx = int8(x) - dx;\\r\\n            ny = int8(y) - dy;\\r\\n            \\r\\n            while (nx >= 0 && nx < int8(BOARD_SIZE) && ny >= 0 && ny < int8(BOARD_SIZE) && \\r\\n                   board[uint8(nx)][uint8(ny)] == pieceType) {\\r\\n                count++;\\r\\n                nx -= dx;\\r\\n                ny -= dy;\\r\\n            }\\r\\n            \\r\\n            if (count >= WIN_CONDITION) {\\r\\n                return true;\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        return false;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev \\u83b7\\u53d6\\u7a7a\\u68cb\\u76d8\\r\\n     */\\r\\n    function _getEmptyBoard() private pure returns (PieceType[BOARD_SIZE][BOARD_SIZE] memory) {\\r\\n        PieceType[BOARD_SIZE][BOARD_SIZE] memory board;\\r\\n        // Solidity\\u9ed8\\u8ba4\\u521d\\u59cb\\u5316\\u4e3a0\\uff08Empty\\uff09\\r\\n        return board;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev \\u4ece\\u7b49\\u5f85\\u5217\\u8868\\u4e2d\\u79fb\\u9664\\u6e38\\u620f\\r\\n     */\\r\\n    function _removeFromWaitingGames(uint256 gameId) private {\\r\\n        for (uint i = 0; i < waitingGames.length; i++) {\\r\\n            if (waitingGames[i] == gameId) {\\r\\n                waitingGames[i] = waitingGames[waitingGames.length - 1];\\r\\n                waitingGames.pop();\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"keccak256\":\"0xbdbb3485078bf24d68d1085cd53cc483969cf43103442d23787db6276d532ebb\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "details": "链上五子棋游戏合约，支持实时对战",
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "cancelGame(uint256)": {
        "details": "取消游戏（仅等待状态）"
      },
      "createGame()": {
        "details": "创建新游戏"
      },
      "createPracticeGame()": {
        "details": "创建练习模式游戏（单人测试）"
      },
      "getBoard(uint256)": {
        "details": "获取游戏棋盘状态"
      },
      "getGame(uint256)": {
        "details": "获取游戏信息"
      },
      "getGameMoves(uint256)": {
        "details": "获取游戏移动记录"
      },
      "getPlayerGames(address)": {
        "details": "获取玩家的游戏列表"
      },
      "getPlayerStats(address)": {
        "details": "获取玩家统计信息"
      },
      "getWaitingGames()": {
        "details": "获取等待中的游戏列表"
      },
      "joinGame(uint256)": {
        "details": "加入游戏"
      },
      "makeBatchMoves(uint256,uint8[],uint8[])": {
        "details": "批量下棋 - 一次交易执行多步操作"
      },
      "makeMove(uint256,uint8,uint8)": {
        "details": "下棋"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "Gomoku",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 188,
        "contract": "contracts/Gomoku.sol:Gomoku",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 8,
        "contract": "contracts/Gomoku.sol:Gomoku",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 314,
        "contract": "contracts/Gomoku.sol:Gomoku",
        "label": "nextGameId",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 319,
        "contract": "contracts/Gomoku.sol:Gomoku",
        "label": "games",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(Game)299_storage)"
      },
      {
        "astId": 325,
        "contract": "contracts/Gomoku.sol:Gomoku",
        "label": "gameMoves",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_array(t_struct(Move)311_storage)dyn_storage)"
      },
      {
        "astId": 330,
        "contract": "contracts/Gomoku.sol:Gomoku",
        "label": "playerGames",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 334,
        "contract": "contracts/Gomoku.sol:Gomoku",
        "label": "playerWins",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 338,
        "contract": "contracts/Gomoku.sol:Gomoku",
        "label": "playerLosses",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 341,
        "contract": "contracts/Gomoku.sol:Gomoku",
        "label": "waitingGames",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_uint256)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_array(t_enum(PieceType)265)15_storage)15_storage": {
        "base": "t_array(t_enum(PieceType)265)15_storage",
        "encoding": "inplace",
        "label": "enum Gomoku.PieceType[15][15]",
        "numberOfBytes": "480"
      },
      "t_array(t_enum(PieceType)265)15_storage": {
        "base": "t_enum(PieceType)265",
        "encoding": "inplace",
        "label": "enum Gomoku.PieceType[15]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Move)311_storage)dyn_storage": {
        "base": "t_struct(Move)311_storage",
        "encoding": "dynamic_array",
        "label": "struct Gomoku.Move[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(GameStatus)270": {
        "encoding": "inplace",
        "label": "enum Gomoku.GameStatus",
        "numberOfBytes": "1"
      },
      "t_enum(PieceType)265": {
        "encoding": "inplace",
        "label": "enum Gomoku.PieceType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_array(t_struct(Move)311_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Gomoku.Move[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Move)311_storage)dyn_storage"
      },
      "t_mapping(t_uint256,t_struct(Game)299_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Gomoku.Game)",
        "numberOfBytes": "32",
        "value": "t_struct(Game)299_storage"
      },
      "t_struct(Game)299_storage": {
        "encoding": "inplace",
        "label": "struct Gomoku.Game",
        "members": [
          {
            "astId": 272,
            "contract": "contracts/Gomoku.sol:Gomoku",
            "label": "gameId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 274,
            "contract": "contracts/Gomoku.sol:Gomoku",
            "label": "player1",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 276,
            "contract": "contracts/Gomoku.sol:Gomoku",
            "label": "player2",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 278,
            "contract": "contracts/Gomoku.sol:Gomoku",
            "label": "currentPlayer",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 281,
            "contract": "contracts/Gomoku.sol:Gomoku",
            "label": "status",
            "offset": 20,
            "slot": "3",
            "type": "t_enum(GameStatus)270"
          },
          {
            "astId": 283,
            "contract": "contracts/Gomoku.sol:Gomoku",
            "label": "winner",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 285,
            "contract": "contracts/Gomoku.sol:Gomoku",
            "label": "createdAt",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 287,
            "contract": "contracts/Gomoku.sol:Gomoku",
            "label": "lastMoveAt",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 294,
            "contract": "contracts/Gomoku.sol:Gomoku",
            "label": "board",
            "offset": 0,
            "slot": "7",
            "type": "t_array(t_array(t_enum(PieceType)265)15_storage)15_storage"
          },
          {
            "astId": 296,
            "contract": "contracts/Gomoku.sol:Gomoku",
            "label": "moveCount",
            "offset": 0,
            "slot": "22",
            "type": "t_uint8"
          },
          {
            "astId": 298,
            "contract": "contracts/Gomoku.sol:Gomoku",
            "label": "isPracticeMode",
            "offset": 1,
            "slot": "22",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "736"
      },
      "t_struct(Move)311_storage": {
        "encoding": "inplace",
        "label": "struct Gomoku.Move",
        "members": [
          {
            "astId": 301,
            "contract": "contracts/Gomoku.sol:Gomoku",
            "label": "x",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 303,
            "contract": "contracts/Gomoku.sol:Gomoku",
            "label": "y",
            "offset": 1,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 305,
            "contract": "contracts/Gomoku.sol:Gomoku",
            "label": "player",
            "offset": 2,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 308,
            "contract": "contracts/Gomoku.sol:Gomoku",
            "label": "pieceType",
            "offset": 22,
            "slot": "0",
            "type": "t_enum(PieceType)265"
          },
          {
            "astId": 310,
            "contract": "contracts/Gomoku.sol:Gomoku",
            "label": "timestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}